import{o as n,c as a,a as s}from"./app.1caabf5a.js";const t='{"title":"Introduction","description":"","frontmatter":{},"headers":[{"level":2,"title":"Introduction","slug":"introduction"},{"level":3,"title":"What is vdes-template?","slug":"what-is-vdes-template"},{"level":3,"title":"How to implement?","slug":"how-to-implement"},{"level":3,"title":"Installation","slug":"installation"},{"level":2,"title":"Syntax","slug":"syntax"},{"level":3,"title":"Output","slug":"output"},{"level":3,"title":"Raw output","slug":"raw-output"},{"level":3,"title":"Condition","slug":"condition"},{"level":3,"title":"Loop","slug":"loop"},{"level":3,"title":"Variable","slug":"variable"},{"level":3,"title":"Template inheritance","slug":"template-inheritance"},{"level":3,"title":"Sub template","slug":"sub-template"},{"level":3,"title":"Comments","slug":"comments"},{"level":2,"title":"Advanced","slug":"advanced"},{"level":3,"title":"extend runtime","slug":"extend-runtime"},{"level":3,"title":"Parsing rules","slug":"parsing-rules"},{"level":2,"title":"options","slug":"options"},{"level":3,"title":"CompileOptions","slug":"compileoptions"},{"level":3,"title":"PreCompileOption","slug":"precompileoption"},{"level":3,"title":"defaultSetting","slug":"defaultsetting"},{"level":2,"title":"API","slug":"api"},{"level":3,"title":"template","slug":"template"},{"level":3,"title":"compile","slug":"compile"},{"level":3,"title":"render","slug":"render"}],"relativePath":"guide/index.md","lastUpdated":1628244097041}',p={},e=s('<h2 id="introduction"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2><h3 id="what-is-vdes-template"><a class="header-anchor" href="#what-is-vdes-template" aria-hidden="true">#</a> What is vdes-template?</h3><p>vdes-template is a javascript template engine, It rewrite in typescript based on the <a href="https://github.com/aui/art-template" target="_blank" rel="noopener noreferrer">art-template</a>.</p><p>It uses a tempalte and a input object to genearte any you want code!</p><p>If you want use vdes-template in the node enviroment.</p><div class="language-html"><pre><code>// ./aaa.vdest\n\nhello! I am {{name}}\n</code></pre></div><div class="language-js"><pre><code><span class="token comment">// use before make sure run commond: yarn add vdes-template</span>\n<span class="token keyword">const</span> vdesTemplate <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;vdes-template&#39;</span><span class="token punctuation">)</span> <span class="token comment">// or import {template} from &#39;vdes-template&#39;</span>\n<span class="token keyword">const</span> genCode <span class="token operator">=</span> vdesTemplate<span class="token punctuation">.</span><span class="token function">template</span><span class="token punctuation">(</span><span class="token string">&#39;./aaa.vdest&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n     name<span class="token operator">:</span> <span class="token string">&#39;vdes-template&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">lgo</span><span class="token punctuation">(</span>genCode<span class="token punctuation">)</span> <span class="token comment">// hello! I am vdes-template</span>\n</code></pre></div><p>If you want use vdes-template in the browser enviroment</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>https://unpkg.com/vdes-template@latest/dist/vdes-template.umd.js<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"> </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>aaa.vdest<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    hello<span class="token operator">!</span> <span class="token constant">I</span> am <span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">const</span> genCode <span class="token operator">=</span> vdesTemplate<span class="token punctuation">.</span><span class="token function">template</span><span class="token punctuation">(</span><span class="token string">&#39;./aaa.vdest&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n     name<span class="token operator">:</span> <span class="token string">&#39;vdes-template&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>genCode<span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n\n</code></pre></div><p>The above code just is an example to help you understand, It is not recommended to play.</p><h3 id="how-to-implement"><a class="header-anchor" href="#how-to-implement" aria-hidden="true">#</a> How to implement?</h3><p>If the template code is this:</p><div class="language-text"><pre><code>I am {{name}}\n</code></pre></div><p>First, The code should be converted to an array of text and expression combinnations using a regular expression, like this:</p><div class="language-js"><pre><code><span class="token punctuation">[</span><span class="token string">&#39;I am &#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;{{name}}&#39;</span><span class="token punctuation">]</span>\n\n</code></pre></div><p>Then, The expression will be parsed and to genarte render function like this:</p><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     $data <span class="token operator">=</span> $data <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n     <span class="token keyword">var</span> $$out <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> name <span class="token operator">=</span> $data<span class="token punctuation">.</span>name\n     $$out <span class="token operator">+=</span> <span class="token string">&quot;I am &quot;</span>\n     $$out <span class="token operator">+=</span> name\n     <span class="token keyword">return</span> $$out\n<span class="token punctuation">}</span>\n\n<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n     name<span class="token operator">:</span> <span class="token string">&#39;vdes-template&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// I am vdes-template</span>\n</code></pre></div><p>Read the render function carefully, I think you should read about how it works. But this is simple example. You want a more detailled understanding of how it works. Please try click the top of menu itme <code>Playground</code> to online running!</p><h3 id="installation"><a class="header-anchor" href="#installation" aria-hidden="true">#</a> Installation</h3><h4 id="npm"><a class="header-anchor" href="#npm" aria-hidden="true">#</a> npm</h4><div class="language-shell"><pre><code><span class="token function">npm</span> <span class="token function">install</span> vdes-template\n\n// or\n<span class="token function">yarn</span> <span class="token function">add</span> vdes-template\n\n</code></pre></div><h4 id="browser"><a class="header-anchor" href="#browser" aria-hidden="true">#</a> browser</h4><div class="language-js"><pre><code><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&#39;https://unpkg.com/vdes-template@latest/dist/vdes-template.umd.js&#39;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n\n</code></pre></div><h2 id="syntax"><a class="header-anchor" href="#syntax" aria-hidden="true">#</a> Syntax</h2><h3 id="output"><a class="header-anchor" href="#output" aria-hidden="true">#</a> Output</h3><div class="language-js"><pre><code><span class="token comment">// inputData: {value}</span>\n<span class="token punctuation">{</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span><span class="token punctuation">}</span> \n<span class="token comment">// inputData: {data: {key}}</span>\n<span class="token punctuation">{</span><span class="token punctuation">{</span>data<span class="token punctuation">.</span>key<span class="token punctuation">}</span><span class="token punctuation">}</span> or <span class="token punctuation">{</span><span class="token punctuation">{</span>data<span class="token punctuation">[</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span>\n<span class="token comment">// inputData: {arr: [&#39;eeee&#39;]}</span>\n<span class="token punctuation">{</span><span class="token punctuation">{</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span>\n\n<span class="token punctuation">{</span><span class="token punctuation">{</span>a <span class="token operator">?</span> b <span class="token operator">:</span> c<span class="token punctuation">}</span><span class="token punctuation">}</span>\n<span class="token punctuation">{</span><span class="token punctuation">{</span>a <span class="token operator">||</span> b<span class="token punctuation">}</span><span class="token punctuation">}</span>\n<span class="token punctuation">{</span><span class="token punctuation">{</span>a <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">}</span><span class="token punctuation">}</span>\n<span class="token punctuation">{</span><span class="token punctuation">{</span>a <span class="token operator">+</span> b<span class="token punctuation">}</span><span class="token punctuation">}</span>\n<span class="token punctuation">{</span><span class="token punctuation">{</span>a <span class="token operator">-</span> b<span class="token punctuation">}</span><span class="token punctuation">}</span>\n\n</code></pre></div><h3 id="raw-output"><a class="header-anchor" href="#raw-output" aria-hidden="true">#</a> Raw output</h3><div class="language-js"><pre><code><span class="token punctuation">{</span><span class="token punctuation">{</span>@ value<span class="token punctuation">}</span><span class="token punctuation">}</span>\n\n</code></pre></div><h3 id="condition"><a class="header-anchor" href="#condition" aria-hidden="true">#</a> Condition</h3><div class="language-js"><pre><code><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token keyword">if</span> v1<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">...</span><span class="token punctuation">.</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span><span class="token punctuation">}</span>\n\n<span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token keyword">if</span> v1<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">...</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token keyword">else</span> <span class="token keyword">if</span> v2<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">...</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token keyword">else</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">...</span>  <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span><span class="token punctuation">}</span>\n</code></pre></div><h3 id="loop"><a class="header-anchor" href="#loop" aria-hidden="true">#</a> Loop</h3><div class="language-js"><pre><code><span class="token punctuation">{</span><span class="token punctuation">{</span>each target<span class="token punctuation">}</span><span class="token punctuation">}</span>\n     <span class="token punctuation">{</span><span class="token punctuation">{</span>$index<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>$value<span class="token punctuation">}</span><span class="token punctuation">}</span>\n<span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token operator">/</span>each<span class="token punctuation">}</span><span class="token punctuation">}</span>\n</code></pre></div><ol><li><code>target</code> supports iteration of array and object.</li><li>$value and $index can be customized:<div class="language-text"><pre><code>{{each target val index}}\n</code></pre></div></li></ol><h3 id="variable"><a class="header-anchor" href="#variable" aria-hidden="true">#</a> Variable</h3><div class="language-"><pre><code>{{set temp = val}}\n</code></pre></div><h3 id="template-inheritance"><a class="header-anchor" href="#template-inheritance" aria-hidden="true">#</a> Template inheritance</h3><div class="language-js"><pre><code><span class="token punctuation">{</span><span class="token punctuation">{</span>extend <span class="token string">&#39;./layout.vdest&#39;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>\n<span class="token punctuation">{</span><span class="token punctuation">{</span>block<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">...</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token operator">/</span>block<span class="token punctuation">}</span><span class="token punctuation">}</span>\n\n</code></pre></div><p>Template inheritance allows you to build a basic templating &quot;skeleton&quot; that conaints common parts of your site. Example:</p><div class="language-html"><pre><code><span class="token comment">&lt;!-- layout.vdest --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>\n     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meat</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>utf-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span> {{block &#39;title&#39;}} My site title {{/block}} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><div class="language-html"><pre><code><span class="token comment">&lt;!-- index.vdest --&gt;</span>\n{{extend &#39;./layout.vdest&#39;}}\n{{block &#39;title&#39;}}vdes-template{{/block}}\n</code></pre></div><p>If render index.vdest. That will output this:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>\n     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meat</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>utf-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>vdes-template<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><h3 id="sub-template"><a class="header-anchor" href="#sub-template" aria-hidden="true">#</a> Sub template</h3><div class="language-"><pre><code>{{include &#39;./header.vdest&#39;}}\n</code></pre></div><h3 id="comments"><a class="header-anchor" href="#comments" aria-hidden="true">#</a> Comments</h3><p>Support line comments and block comments</p><div class="language-js"><pre><code><span class="token comment">// ...</span>\n\n<span class="token comment">/*...*/</span>\n</code></pre></div><h2 id="advanced"><a class="header-anchor" href="#advanced" aria-hidden="true">#</a> Advanced</h2><h3 id="extend-runtime"><a class="header-anchor" href="#extend-runtime" aria-hidden="true">#</a> extend runtime</h3><p>We can extend or modify the runtime to achieve what we want:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span>compile<span class="token punctuation">,</span> runtime<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vdes-template&quot;</span>\n<span class="token keyword">const</span> myRuntime <span class="token operator">=</span> runtime\nmyRuntime<span class="token punctuation">.</span><span class="token function-variable function">$hello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n     <span class="token keyword">return</span> <span class="token string">&quot;hello world&quot;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token function">compile</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n     source<span class="token operator">:</span> <span class="token string">&#39;{{$imports.$hello()}}&#39;</span><span class="token punctuation">,</span>\n     imports<span class="token operator">:</span> myRuntime \n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token comment">// hello world</span>\n\n</code></pre></div><h3 id="parsing-rules"><a class="header-anchor" href="#parsing-rules" aria-hidden="true">#</a> Parsing rules</h3><p>You can customize template parsing rules in vdes-template. The default sysntx:</p><div class="language-"><pre><code>defaultSetting.rules[0].test = /{{([@#]?)[ \\t]*(\\/?)([\\w\\W]*?)[ \\t]*}}/\n</code></pre></div><h2 id="options"><a class="header-anchor" href="#options" aria-hidden="true">#</a> options</h2><h3 id="compileoptions"><a class="header-anchor" href="#compileoptions" aria-hidden="true">#</a> CompileOptions</h3><div class="language-javascript"><pre><code><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">CompilerOption</span> <span class="token punctuation">{</span>\n   <span class="token comment">// Template content. If haven&#39;t the field, the content is loaded according to the filename</span>\n   source<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">,</span>\n   <span class="token comment">// Template filename</span>\n   filename<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">,</span>\n   <span class="token comment">// An array of rules of template syntax</span>\n   rules<span class="token operator">?</span><span class="token operator">:</span> TplTokenRule<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n   <span class="token comment">// Whether to enable automatic encoding of template output statements</span>\n   escape<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span>\n   <span class="token comment">// Whether to enable to debug mode</span>\n   debug<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span>\n   <span class="token comment">// If ture, both the compile and runtime errors throw exceptions</span>\n   bail<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span>\n   \n   cache<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span>\n   <span class="token comment">// Whether to enable minization, It will execute htmlMinifier and minimize HTML, CSS, JS. Only take effect with node enviroment</span>\n   minisize<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span>\n   <span class="token comment">// Whether to compile in debug mode</span>\n   compileDebug<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span>\n   <span class="token comment">// Transition template path</span>\n   resolveFilename<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">filename<span class="token operator">:</span> string<span class="token punctuation">,</span> options<span class="token operator">:</span> CompilerOption</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> string<span class="token punctuation">,</span>\n   <span class="token comment">// Include sub template</span>\n   include<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">filename<span class="token operator">:</span> string<span class="token punctuation">,</span> data<span class="token operator">:</span> object<span class="token punctuation">,</span> blocks<span class="token operator">:</span> object<span class="token punctuation">,</span> options<span class="token operator">:</span> CompilerOption</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> string<span class="token punctuation">,</span>\n   <span class="token comment">// Html compression, effect only nodejs</span>\n   htmlMinifier<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">source<span class="token operator">:</span> string<span class="token punctuation">,</span> options<span class="token operator">:</span> CompilerOption</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> string<span class="token punctuation">,</span>\n   htmlMinifierOptions<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n       collapseWhitespace<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span>\n       minifyCSS<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span>\n       minifyJS<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span>\n       ignoreCustomFragments<span class="token operator">?</span><span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span>\n   <span class="token punctuation">}</span><span class="token punctuation">,</span>\n   <span class="token comment">// Effect only bail=false</span>\n   onerror<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token operator">:</span> any<span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token operator">:</span> CompilerOption</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">,</span>\n   <span class="token comment">// Template file loader</span>\n   loader<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">filename<span class="token operator">:</span> string<span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token operator">:</span> CompilerOption</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> string<span class="token punctuation">,</span>\n   <span class="token comment">// Cache adapter</span>\n   caches<span class="token operator">?</span><span class="token operator">:</span> Caches<span class="token punctuation">,</span>\n   <span class="token comment">// Root directory of template. If filename field is not a local path, template will be found in root directory</span>\n   root<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">,</span>\n   <span class="token comment">// Default extension. If no extensions, Extname will be automatically added</span>\n   extname<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">,</span>\n   <span class="token comment">// An array of template variables ignored by template compiler</span>\n   ignore<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n   <span class="token comment">// runtime</span>\n   imports<span class="token operator">?</span><span class="token operator">:</span> Object\n\n<span class="token punctuation">}</span>\n\n</code></pre></div><h3 id="precompileoption"><a class="header-anchor" href="#precompileoption" aria-hidden="true">#</a> PreCompileOption</h3><div class="language-javascript"><pre><code><span class="token keyword">export</span> type PreCompileOption <span class="token operator">=</span> CompilerOption <span class="token operator">&amp;</span> <span class="token punctuation">{</span>\n    sourceMap<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span>\n    sourceRoot<span class="token operator">?</span><span class="token operator">:</span> string\n<span class="token punctuation">}</span>\n\n</code></pre></div><h3 id="defaultsetting"><a class="header-anchor" href="#defaultsetting" aria-hidden="true">#</a> defaultSetting</h3><div class="language-javascript"><pre><code><span class="token keyword">export</span> <span class="token keyword">const</span> defaultSetting<span class="token operator">:</span> CompilerOption <span class="token operator">=</span> <span class="token punctuation">{</span>\n    source<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    filename<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">VdesTRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    escape<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    debug<span class="token operator">:</span> detectNode <span class="token operator">?</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    bail<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    cache<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    minisize<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    compileDebug<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    resolveFilename<span class="token operator">:</span> resolveFilename<span class="token punctuation">,</span>\n    include<span class="token operator">:</span> include<span class="token punctuation">,</span>\n    htmlMinifier<span class="token operator">:</span> htmlMinifier<span class="token punctuation">,</span>\n    htmlMinifierOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n        collapseWhitespace<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        minifyCSS<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        minifyJS<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        ignoreCustomFragments<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    onerror<span class="token operator">:</span> onerror<span class="token punctuation">,</span>\n    loader<span class="token operator">:</span> loader<span class="token punctuation">,</span>\n    caches<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Caches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    root<span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>\n    extname<span class="token operator">:</span> <span class="token string">&#39;.vdest&#39;</span><span class="token punctuation">,</span>\n    ignore<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    imports<span class="token operator">:</span> runtime\n\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n\n</code></pre></div><h2 id="api"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h2><h3 id="template"><a class="header-anchor" href="#template" aria-hidden="true">#</a> template</h3><h4 id="define"><a class="header-anchor" href="#define" aria-hidden="true">#</a> Define:</h4><ul><li>Render templates according to template name</li><li>Content is object,render template and renturn strinng. Content is string, compile template and return function.</li></ul><div class="language-javascript"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token parameter">filename<span class="token operator">:</span> string<span class="token punctuation">,</span> content<span class="token operator">:</span> string <span class="token operator">|</span> object</span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token operator">|</span> Function\n</code></pre></div><h4 id="usages"><a class="header-anchor" href="#usages" aria-hidden="true">#</a> Usages:</h4><div class="language-javascript"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span>template<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vdes-template&#39;</span>\n\n<span class="token comment">// From local to load template</span>\n<span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token string">&#39;./hello.vdest&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n     val<span class="token operator">:</span> <span class="token string">&#39;aaaaa&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// Compile template and cache it</span>\n<span class="token function">template</span><span class="token punctuation">(</span><span class="token string">&#39;./hello.vdest&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;I am {{val}}&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token string">&#39;./hello.vdest&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n     val<span class="token operator">:</span> <span class="token string">&#39;aaaaaa&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="compile"><a class="header-anchor" href="#compile" aria-hidden="true">#</a> compile</h3><h4 id="define-1"><a class="header-anchor" href="#define-1" aria-hidden="true">#</a> Define</h4><p>Compile template and renturn a rendering function</p><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">compile</span><span class="token punctuation">(</span><span class="token parameter">source<span class="token operator">:</span> string <span class="token operator">|</span> CompilerOption<span class="token punctuation">,</span> options<span class="token operator">:</span> CompilerOption <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token operator">:</span> CompilerRenderFunc\n\n</code></pre></div><h4 id="usages-1"><a class="header-anchor" href="#usages-1" aria-hidden="true">#</a> Usages:</h4><div class="language-"><pre><code>import {compile} from &quot;vdes-template&quot;\ncompile({\n     filename: &#39;./hello.vdest&#39;\n}).render({\n     val: &#39;aaaa&#39;\n})\n</code></pre></div><h3 id="render"><a class="header-anchor" href="#render" aria-hidden="true">#</a> render</h3><h4 id="define-2"><a class="header-anchor" href="#define-2" aria-hidden="true">#</a> Define:</h4><p>Compile and return rendering results</p><div class="language-"><pre><code>export function render(source: string | CompilerOption, data: object, options?: CompilerOption)\n</code></pre></div><h4 id="usages-2"><a class="header-anchor" href="#usages-2" aria-hidden="true">#</a> Usages:</h4><div class="language-"><pre><code>import {render} from &quot;vdes-template&quot;\nrender(&#39;I am {{val}}&#39;, {val: &#39;aaaa&#39;})\n\n</code></pre></div>',80);p.render=function(s,t,p,o,c,l){return n(),a("div",null,[e])};export{t as __pageData,p as default};
